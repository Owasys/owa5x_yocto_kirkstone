From 59be8493d960c6cd829113a713d4cd248a93f743 Mon Sep 17 00:00:00 2001
From: Brad Grantham <brad@lunarg.com>
Date: Wed, 29 Dec 2021 17:23:21 -0800
Subject: [PATCH] make s_alt_stack dynamic, save and use probed size

Upstream-Status: backport [https://github.com/LunarG/gfxreconstruct/commit/59be8493d960c6cd829113a713d4cd248a93f743]
---
 framework/util/page_guard_manager.cpp | 24 ++++++++++++++++++++----
 framework/util/page_guard_manager.h   |  2 ++
 2 files changed, 22 insertions(+), 4 deletions(-)

diff --git a/framework/util/page_guard_manager.cpp b/framework/util/page_guard_manager.cpp
index 6617ccfc..37a4089b 100644
--- a/framework/util/page_guard_manager.cpp
+++ b/framework/util/page_guard_manager.cpp
@@ -110,7 +110,8 @@ const uint32_t kGuardNoProtect        = PROT_READ | PROT_WRITE;
 static struct sigaction s_old_sigaction = {};
 static stack_t          s_old_stack     = {};
 
-static uint8_t s_alt_stack[SIGSTKSZ];
+static uint8_t* s_alt_stack      = nullptr;
+static size_t   s_alt_stack_size = 0;
 
 static void PageGuardExceptionHandler(int id, siginfo_t* info, void* data)
 {
@@ -188,11 +189,24 @@ static void PageGuardExceptionHandler(int id, siginfo_t* info, void* data)
 
 PageGuardManager* PageGuardManager::instance_ = nullptr;
 
+void PageGuardManager::InitializeSystemExceptionContext(void)
+{
+#if defined(__linux__)
+    if (s_alt_stack == nullptr)
+    {
+        s_alt_stack_size = SIGSTKSZ;
+        s_alt_stack      = new uint8_t[s_alt_stack_size];
+    }
+#endif
+}
+
 PageGuardManager::PageGuardManager() :
     exception_handler_(nullptr), exception_handler_count_(0), system_page_size_(GetSystemPageSize()),
     system_page_pot_shift_(GetSystemPagePotShift()), enable_copy_on_map_(kDefaultEnableCopyOnMap),
     enable_separate_read_(kDefaultEnableSeparateRead), enable_read_write_same_page_(kDefaultEnableReadWriteSamePage)
-{}
+{
+    InitializeSystemExceptionContext();
+}
 
 PageGuardManager::PageGuardManager(bool enable_copy_on_map,
                                    bool enable_separate_read,
@@ -201,7 +215,9 @@ PageGuardManager::PageGuardManager(bool enable_copy_on_map,
     exception_handler_count_(0), system_page_size_(GetSystemPageSize()),
     system_page_pot_shift_(GetSystemPagePotShift()), enable_copy_on_map_(enable_copy_on_map),
     enable_separate_read_(enable_separate_read), enable_read_write_same_page_(expect_read_write_same_page)
-{}
+{
+    InitializeSystemExceptionContext();
+}
 
 PageGuardManager::~PageGuardManager()
 {
@@ -358,7 +374,7 @@ void PageGuardManager::AddExceptionHandler()
                 stack_t new_stack;
                 new_stack.ss_sp    = s_alt_stack;
                 new_stack.ss_flags = 0;
-                new_stack.ss_size  = sizeof(s_alt_stack);
+                new_stack.ss_size  = s_alt_stack_size;
 
                 sigaltstack(&new_stack, &s_old_stack);
 
diff --git a/framework/util/page_guard_manager.h b/framework/util/page_guard_manager.h
index 2c2b4e26..70830326 100644
--- a/framework/util/page_guard_manager.h
+++ b/framework/util/page_guard_manager.h
@@ -181,6 +181,8 @@ class PageGuardManager
   private:
     size_t GetSystemPageSize() const;
     size_t GetSystemPagePotShift() const;
+    size_t InitSystemExceptionHandler() const;
+    void   InitializeSystemExceptionContext();
 
     void AddExceptionHandler();
     void RemoveExceptionHandler();
-- 
2.25.1

